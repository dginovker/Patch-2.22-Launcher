name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: PatchLauncher.sln                                   # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Patch2.22Launcher\PatchLauncherBFME1.csproj     # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install .NET
    - name: Install .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Create the app package by building and packaging the Windows Application Packaging project
    # Add self-contained support for the following platforms: x86|x64
    - name: Create app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxBundlePlatforms=$env:Appx_Bundle_Platforms /p:RuntimeIdentifier=win-x64 /p:AppxBundlePlatforms=$env:Appx_Bundle_Platforms /p:AppxBundle=Always 
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}
        Wap_Project_Path: Patch2.22Launcher\PatchLauncherBFME1.csproj

    # Upload Patch-2.22-Launcher\Patch-2.22-Launcher\build\Release\net6.0-windows folder
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: PatchLauncher.zip
        path: build\Release\net6.0-windows

    # Zip the build artifacts
    - name: Zip build artifacts
      run: |
        cd build\Release\net6.0-windows
        7z a -tzip ${{ github.workspace }}\PatchLauncher.zip *

    # Create a new Github Release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: release-${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false

    # Upload the build artifacts to the new Github Release
    - name: Upload Release Asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ github.run_number }}
        files: PatchLauncher.zip
        fail_on_unmatched_files: true
        name: Patch Launcher Files - ${{ github.run_number }}


